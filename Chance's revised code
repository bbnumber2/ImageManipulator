import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.ImageView;
import javafx.scene.image.PixelReader;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import static java.lang.Math.floor;

public class ImageManipulator extends Application implements ImageManipulatorInterface{
    public static void main(String[] args) {
        launch(args);
    }
    private WritableImage img = null;
    private BorderPane borderPane = null;
    private Stage stage = null;

    @Override
    public void start(Stage primaryStage){
        stage = primaryStage;
        borderPane = new BorderPane();

        if(img != null) {
            borderPane.setCenter(new ImageView(img));
        }

        borderPane.setBottom(makeButtons());

        Scene scene1 = new Scene(borderPane, (img == null) ? 320 : (img.getWidth() < 320) ? 320 : img.getWidth()+40, (img == null) ? 240 : (img.getHeight() < 240) ? 240 : img.getWidth()+30);

        primaryStage.setResizable(false);
        primaryStage.setTitle("Image Manipulator-inator");
        primaryStage.setScene(scene1);
        primaryStage.show();

    }

    private HBox makeButtons() {
        HBox box = new HBox();
        box.setAlignment(Pos.CENTER);

        Button load = new Button("Load");
        load.setOnAction(event -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Open Image File");
            File file = fileChooser.showOpenDialog(stage);

            if (file != null) {
                try {
                    img = loadImage(file.getAbsolutePath());
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }

            start(stage);
        });

        Button save = new Button("Save");
        save.setOnAction(event -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Save Image File");
            File file = fileChooser.showSaveDialog(stage);

            if (file != null && img != null) {
                try {
                    saveImage(file.getAbsolutePath(), img);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }

        });

        Button invert = new Button("Invert");
        invert.setOnAction(event -> {
            if (img != null) {
                borderPane.setCenter(new ImageView(img = invertImage(img)));
            }
        });

        Button grayify = new Button("Grayify");
        grayify.setOnAction(event -> {
            if (img != null) {
                borderPane.setCenter(new ImageView(img = grayifyImage(img)));
            }
        });

        Button pixelate = new Button("Pixelate");
        pixelate.setOnAction(event -> {
            if (img != null) {
                borderPane.setCenter(new ImageView(img = pixelateImage(img)));
            }
        });

        Button flip = new Button("Flip");
        flip.setOnAction(event -> {
            if (img != null) {
                borderPane.setCenter(new ImageView(img = flipImage(img)));
            }
        });

        box.getChildren().addAll(load,invert,grayify,pixelate,flip,save);
        return box;
    }

    @Override
    public WritableImage loadImage(String filename) throws FileNotFoundException {
        File file = cleanFile(filename);
        Scanner scanner = new Scanner(file);
        if(!scanner.nextLine().equals("P3")){
            throw new FileNotFoundException();
        }
        // Assumes files are not corrupted
        int width = scanner.nextInt();
        int height = scanner.nextInt();

        double maxColor = scanner.nextDouble();
        if(maxColor != 255){
            // TODO: Handle incorrect maxColor
        }

        WritableImage out = new WritableImage(width, height);
        PixelWriter writer = out.getPixelWriter();
        for(int x = 0, y = 0; scanner.hasNextDouble(); x++){
            if(x == width){
                y++;
                x = 0;
            }
            double red = scanner.nextDouble() / maxColor;
            if(!scanner.hasNextDouble()){
                // TODO: Handle incorrect format
            }
            double green = scanner.nextDouble() / maxColor;
            if(!scanner.hasNextDouble()){
                // TODO: Handle incorrect format
            }
            double blue = scanner.nextDouble() / maxColor;
            Color color = new Color(red, green, blue, 1.0);
            writer.setColor(x, y, color);
        }

        scanner.close();
        return out;

    }

    /**
     * Copies the contents of the given File, but without comments
     * 
     * @param filename String corresponding to the filename of a .ppm File
     * @return new .ppm File without comments
     * @throws FileNotFoundException
     */
    private File cleanFile(String filename) throws FileNotFoundException{
        // Assumes files are .ppm files
        File in = new File(filename);
        String path = in.getAbsolutePath();
        File out = new File(path.substring(0, path.length() - 4) + "_clean.ppm");
        try {
            if(!out.createNewFile()){
                // Clean file already exists
                return out;
            }
        } catch (IOException e) {
            //TODO: handle exception
        }
        Scanner scanner = new Scanner(in);
        PrintWriter writer = new PrintWriter(out);
        while(scanner.hasNextLine()){
            String line = scanner.nextLine();
            if(line.startsWith("#")){
                continue;
            }
            writer.println(line);
        }
        scanner.close();
        writer.close();
        return out;
    }

    @Override
    public void saveImage(String filename, WritableImage image) throws FileNotFoundException {
        File file = new File(filename);
        PrintWriter writer = new PrintWriter(file);
        PixelReader reader = image.getPixelReader();
        writer.println("P3");
        writer.println("# " + filename);
        writer.printf("%d %d\n", (int) image.getWidth(), (int) image.getHeight());
        writer.println(255);
        for(int y = 0; y < image.getHeight(); y++){
            for(int x = 0; x < image.getWidth(); x++){
                Color color = reader.getColor(x, y);
                int red = (int) (color.getRed() * 255);
                int green = (int) (color.getGreen() * 255);
                int blue = (int) (color.getBlue() * 255);
                writer.printf("%03d %03d %03d ", red, green, blue);
            }
            writer.printf("\n");
        }
        writer.close();
    }

    @Override
    public WritableImage invertImage(WritableImage image) {
        WritableImage out = new WritableImage((int)image.getWidth(), (int)image.getHeight());
        PixelWriter writer = out.getPixelWriter();
        PixelReader reader = image.getPixelReader();
        for(int y = 0; y < image.getHeight(); y++){
            for(int x = 0; x < image.getWidth(); x++){
                writer.setColor(x, y, reader.getColor(x, y).invert());
            }
        }
        return out;
    }

    @Override
    public WritableImage grayifyImage(WritableImage image) {
        WritableImage out = new WritableImage((int)image.getWidth(), (int)image.getHeight());
        PixelWriter writer = out.getPixelWriter();
        PixelReader reader = image.getPixelReader();
        for(int y = 0; y < image.getHeight(); y++){
            for(int x = 0; x < image.getWidth(); x++){
                // Color color = reader.getColor(x, y).grayscale()
                // Cannot use the above because a specific rgb formula is given
                Color color = reader.getColor(x, y);
                double brightness = Math.floor((0.2989 * color.getRed()*255 + 0.5870 * color.getGreen()*255 + 0.1140 * color.getBlue()*255));
                brightness = brightness/(255);
                Color grayifiedColor = new Color(brightness, brightness, brightness, 1.0);
                writer.setColor(x, y, grayifiedColor);
            }
        }
        return out;
    }

    @Override
    public WritableImage pixelateImage(WritableImage image) {
        WritableImage out = new WritableImage((int)image.getWidth(), (int)image.getHeight());
        PixelWriter writer = out.getPixelWriter();
        PixelReader reader = image.getPixelReader();
        /**
         * loop's through entire image, pixelating the image by coloring all the pixels
        * in 5x5 regions to the center pixel of said regions.
        * "x" is image x-coordinate, "y" is image y-coordinate
        * horizontalEdge is boolean for when x-cood. hits horizontal edge
        * verticalEdge is boolean for when y-cood. hits vertical edge
         */
        for(int x = 2, y = 2; y < (int) image.getHeight() ; x += 5){
            boolean horizontalEdge = false;
            boolean verticalEdge = false;

            if (x >= (int) image.getWidth()) {
                x = (int) image.getWidth()-1;
                horizontalEdge = true;
            }

            if (y >= (int) image.getHeight()) {
                y = (int) image.getHeight()-1;
                verticalEdge = true;
            }

            // if y+2 is greater than or equal to the image's height,
            // set yMax to image's height-1, else yMax equals y+2.
            int yMax = (y+2 >= (int) image.getHeight()) ? (int) image.getHeight()-1: y+2;

            // if x+2 is greater than or equal to the image's width,
            // set xMax to image's width-1, else xMax equals x+2.
            int xMax = (x+2 >= (int) image.getWidth()) ? (int) image.getWidth()-1: x+2;

            // Sets the color of all neighbor pixels to the center pixel in a 5x5 region
            // "a" is local region's x-coordinate, "b" is local region's y-coordinate.
            for(int a = x-2, b = y-2; b <= ((verticalEdge) ? y : yMax ); a++) {
                // if x was not greater than equal to image width but x+2 is,
                // don't color neighboring pixels.
                if (!horizontalEdge && !((x+2 >= (int) image.getWidth()))) {
                    writer.setColor(a, b, reader.getColor(x, y));
                }

                if(a >= ((horizontalEdge) ? x : xMax)) {
                    a = x-3;
                    b++;
                }
            }

            if (horizontalEdge || (x+2 >= (int) image.getWidth()) ) {
                x = -3;
                y+=5;
                horizontalEdge = false;
            }
        }
        return out;
    }

    @Override
    public WritableImage flipImage(WritableImage image) {
        int width = (int)image.getWidth();
        int height = (int)image.getHeight();
        WritableImage out = new WritableImage(width, height);
        PixelReader reader = image.getPixelReader();
        PixelWriter writer = out.getPixelWriter();
        int w2 = width - 1;
        int h2 = height - 1;
        for(int i = 0; i < width - 1; i++)
        {
            for(int j = 0; j < height - 1; j++){
                Color current = reader.getColor(i,j);
                writer.setColor(w2,h2,current);
                h2--;
            }
            h2 = height - 1;
            w2--;
        }
        return out;
    }
}
